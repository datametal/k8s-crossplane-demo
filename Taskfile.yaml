version: '3'

tasks:

  # Package
  package-generate:
    desc: Generates package files.
    cmds:
      - timoni build dot-kubernetes timoni > package/all.yaml
      - head -n -1 package/all.yaml > package/all.yaml.tmp
      - mv package/all.yaml.tmp package/all.yaml
  package-apply:
    desc: Applies Compositions and Composite Resource Definition.
    cmds:
      - cmd: kubectl apply --filename package/definition.yaml && sleep 1
      - cmd: kubectl apply --filename package/all.yaml
  package-publish:
    desc: Builds and pushes the package.
    deps:
      - package-generate
    cmds:
      - up login --token $UP_TOKEN
      - up xpkg build --package-root package --name kubernetes.xpkg
      - up xpkg push --package package/kubernetes.xpkg xpkg.upbound.io/$UP_ACCOUNT/dot-kubernetes:$VERSION
      - rm package/kubernetes.xpkg
      - yq --inplace ".spec.package = \"xpkg.upbound.io/devops-toolkit/dot-kubernetes:$VERSION\"" config.yaml

  # Test
  test:
    desc: Combines `cluster-create`, `test-watch` (without the watcher), and `cluster-destroy` tasks.
    cmds:
      - task: cluster-create
      - task: test-watch
      - defer: { task: cluster-destroy }
  test-watch:
    desc: Runs tests in the watch mode assuming that the cluster is already created and everything is installed.
    deps:
      - task: package-generate
    cmds:
      - task: package-apply
      - chainsaw test
    watch: true
    sources:
      - timoni/**/*.cue
      - tests/**/*.yaml
    generates:
      - package/all.yaml
  test-once:
    desc: Runs tests once assuming that the cluster is already created and everything is installed.
    deps:
      - task: package-generate
    cmds:
      - task: package-apply
      - chainsaw test

  # Cluster
  cluster-create:
    desc: Creates a kind cluster, installs Crossplane, providers, and packages, waits until they are healthy, and runs tests.
    vars:
      TIMEOUT: 300s
      PROVIDERS:
        sh: ls -1 providers | grep -v config
    deps:
      - package-generate
      - cluster-create-kind
      - helm-repo
    cmds:
      - helm upgrade --install crossplane crossplane-stable/crossplane --namespace crossplane-system --create-namespace --wait
      - for: { var: PROVIDERS }
        cmd: kubectl apply --filename providers/{{ .ITEM }}
      - task: package-apply
      - sleep 60
      - kubectl wait --for=condition=healthy provider.pkg.crossplane.io --all --timeout={{.TIMEOUT}}
      - kubectl wait --for=condition=healthy function.pkg.crossplane.io --all --timeout={{.TIMEOUT}}
  cluster-destroy:
    desc: Destroys the cluster
    cmds:
      - kind delete cluster
  cluster-create-kind:
    desc: Creates a kind cluster
    cmds:
      - cmd: kind create cluster
        ignore_error: true
    internal: true
  helm-repo:
    cmds:
      - helm repo add crossplane-stable https://charts.crossplane.io/stable
      - helm repo update
    internal: true
